include colors.conf

font_family      Iosevka Term Medium
italic_font      Iosevka Term Medium Italic
bold_font        Iosevka Term Heavy
bold_italic_font Iosevka Term Heavy Italic
font_size 12.0
font_features Iosevka-Term-Medium +cv82=6 +cv87=1 +cv93=3 +cv77=1 +cv80=1 +cv75=1
font_features Iosevka-Term-Medium-Italic +cv82=6 +cv87=1 +cv93=3 +cv77=1 +cv80=1 +cv75=1
font_features Iosevka-Term-Heavy +cv82=6 +cv87=1 +cv93=3 +cv77=1 +cv80=1 +cv75=1
font_features Iosevka-Term-Heavy-Italic +cv82=6 +cv87=1 +cv93=3 +cv77=1 +cv80=1 +cv75=1

# modify_font cell_height -1
box_drawing_scale 0.001, 1, 1.5, 2

cursor_blink_interval 0.5
cursor_stop_blinking_after 15.0

scrollback_lines 1000
scrollback_pager_history_size 10
scrollback_pager kak -e "rmhl window/wrap;rmhl window/number-lines;rmhl window/trailing-whitespace;exec CURSOR_LINEg"

wheel_scroll_multiplier 5.0
click_interval 0.5

strip_trailing_spaces always
select_by_word_characters :@-./_~?&=%+#

shell_integration enabled no-rc
shell elvish
editor kak

mouse_hide_wait 0
focus_follows_mouse yes

enabled_layouts *

# 'c' suffix for cells instead of pixels
remember_window_size no
initial_window_width 640
initial_window_height 400
hide_window_decorations no

repaint_delay 15
input_delay 3
sync_to_monitor yes

visual_bell_duration 0.0
enable_audio_bell yes
window_alert_on_bell yes
bell_on_tab yes

open_url_with default

close_on_child_death no
confirm_os_window_close 0
show_hyperlink_targets no
copy_on_select no
allow_remote_control yes
startup_session none
clipboard_control write-clipboard write-primary read-clipboard read-primary
allow_hyperlinks yes
term xterm-kitty

env PAGER=kakpager
env MANPAGER=less
env LESSHISTFILE=-

window_border_width 1
window_margin_width 0
window_padding_width 0

inactive_text_alpha 1.0

resize_debounce_time 0.1
resize_draw_strategy size

tab_bar_edge bottom
tab_bar_margin_width 0
# fade | separator
tab_bar_style separator
tab_bar_min_tabs 2
tab_switch_strategy previous
tab_fade 0.15 0.3 0.45 0.8
tab_separator " â”‡"
tab_title_template {title}

active_tab_font_style bold-italic
inactive_tab_font_style normal

url_style double

background_opacity 0.9
dynamic_background_opacity no
dim_opacity 0.75

cursor_shape     beam

# Key mapping
# http://www.glfw.org/docs/latest/group__keys.html
# http://www.glfw.org/docs/latest/group__mods.html
# The name to use is the part after the `GLFW_KEY_` prefix.
#
# https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-keysyms.h
# The name to use is the part after the `XKB_KEY_` prefix

# + - chord
# > - sequence
# no_op - unbind
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
kitty_mod ctrl+shift

map kitty_mod+delete   clear_terminal reset active
map kitty_mod+f9       clear_terminal reset active
map kitty_mod+f10      clear_terminal clear active
map kitty_mod+f11      clear_terminal scrollback active

# Clipboard
map kitty_mod+c        copy_to_clipboard
map kitty_mod+v        paste_from_clipboard
map shift+insert       paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map kitty_mod+o      pass_selection_to_program firefox

# Scrolling
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+k         scroll_line_up
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback

map kitty_mod+z         scroll_to_prompt -1
map kitty_mod+x         scroll_to_prompt 1

# Window management
map kitty_mod+enter    new_window
map kitty_mod+w        close_window
map kitty_mod+]        next_window
map kitty_mod+[        previous_window
map kitty_mod+f        move_window_forward
map kitty_mod+b        move_window_backward
map kitty_mod+`        move_window_to_top
map kitty_mod+1        first_window
map kitty_mod+2        second_window
map kitty_mod+3        third_window
map kitty_mod+4        fourth_window
map kitty_mod+5        fifth_window
map kitty_mod+6        sixth_window
map kitty_mod+7        seventh_window
map kitty_mod+8        eighth_window
map kitty_mod+9        ninth_window
map kitty_mod+0        tenth_window

# Tab management
map kitty_mod+right    next_tab
map kitty_mod+left     previous_tab
map kitty_mod+t        new_tab
map kitty_mod+q        close_tab
map kitty_mod+alt+l    next_layout
map kitty_mod+.        move_tab_forward
map kitty_mod+,        move_tab_backward
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Layout management
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack

# Font sizes
# all | current
map kitty_mod+equal    change_font_size all +2.0
map kitty_mod+minus    change_font_size all -2.0
map kitty_mod+backspace change_font_size all 0
map kitty_mod+alt+equal    change_font_size current +2.0
map kitty_mod+alt+minus    change_font_size current -2.0
map kitty_mod+alt+backspace change_font_size current 0

# Kittens
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
map kitty_mod+e         kitten hints
# Select a path/filename and insert it into the terminal.
map kitty_mod+p>f       kitten hints --type=path --program=-
# Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f kitten hints --type=path
# Select a line of text and insert it into the terminal.
map kitty_mod+p>l       kitten hints --type=line --program=-
# Select words and insert into terminal.
map kitty_mod+p>w       kitten hints --type=word --program=-
# Open selected file at the selected line
map kitty_mod+p>n       kitten hints --type=linenum --linenum-action=tab kak -e 'exec {line}g' {path}

map f1 create_marker
map shift+f1 remove_marker
map kitty_mod+n scroll_to_mark next

map kitty_mod+u        input_unicode_character

# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
map kitty_mod+escape   kitty_shell overlay
map kitty_mod+a>m set_background_opacity +0.1
map kitty_mod+a>l set_background_opacity -0.1
map kitty_mod+a>1 set_background_opacity 1
map kitty_mod+a>d set_background_opacity default

# Launching and data passing
# --title, --tab-title
# --type background/clipboard/os-window/overlay/primary/tab/window
# --keep-focus
# --cwd path/current
# --env key=value
# --copy-colors, --copy-cmdline, --copy-env
# --location first, last, neighbor
# --allow-remote-control
# --stdin-source @alternate/@alternate_scrollback/@screen/@screen_scrollback/@selection/none
# --stdin-add-formatting, --stdin-add-line-wrap-markers
# KITTY_PIPE_DATA={scrolled_by}:{cursor_x},{cursor_y}:{lines},{columns}
map ctrl+alt+enter launch --type=os-window --cwd=current
map kitty_mod+f1   launch --type=overlay --stdin-source=@alternate_scrollback --stdin-add-formatting kakpager
map kitty_mod+g    launch --type=overlay --cwd=current tig
map kitty_mod+l    launch --type=overlay --stdin-source=@last_cmd_output --stdin-add-formatting kakpager
map kitty_mod+alt+l launch --type=overlay --stdin-source=@first_cmd_output_on_screen --stdin-add-formatting kakpager

mouse_map kitty_mod+left release grabbed,ungrabbed mouse_click_url
mouse_map right press ungrabbed mouse_select_command_output

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH

symbol_map U+23FB-U+23FE,U+2B58,U+E200-U+E2A9,U+E0A0-U+E0A3,U+E0B0-U+E0BF,U+E0C0-U+E0C8,U+E0CC-U+E0CF,U+E0D0-U+E0D2,U+E0D4,U+E700-U+E7C5,U+F000-U+F2E0,U+2665,U+26A1,U+F400-U+F4A8,U+F67C,U+E000-U+E00A,U+F300-U+F313,U+E5FA-U+E62B 3270Medium Nerd Font Mono
